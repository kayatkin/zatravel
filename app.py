import os
import sys
import logging
from flask import Flask
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –≤ sys.path (–¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤)
sys.path.append(BASE_DIR)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import Config

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—É—Ç—è–º–∏ –∫ —à–∞–±–ª–æ–Ω–∞–º –∏ —Å—Ç–∞—Ç–∏–∫–µ
app = Flask(__name__,
            template_folder=os.path.join(BASE_DIR, 'app', 'templates'),
            static_folder=os.path.join(BASE_DIR, 'app', 'static'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∫–ª–∞—Å—Å–∞ Config
app.config.from_object(Config)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ===
try:
    from app.services.cache_service import cache, init_cache
    init_cache(app)
    logger.info("‚úì Cache initialized successfully")
except ImportError as e:
    logger.error(f"Error initializing cache: {e}")
    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ –∫—ç—à–∞
    pass

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤ ===
# –í—ã–Ω–µ—Å–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è best practices
try:
    from app.template_filters import format_datetime, format_duration, format_price, truncate_text
    
    app.jinja_env.filters['format_datetime'] = format_datetime
    app.jinja_env.filters['format_duration'] = format_duration
    app.jinja_env.filters['format_price'] = format_price
    app.jinja_env.filters['truncate'] = truncate_text
    
    logger.info("‚úì Template filters registered successfully")
except ImportError as e:
    logger.error(f"Error importing template filters: {e}")
    # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (—à–∞–±–ª–æ–Ω—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è blueprint'–æ–≤ ===
try:
    from app.routes import bp
    app.register_blueprint(bp)
    logger.info("‚úì Routes loaded successfully")
except ImportError as e:
    logger.error(f"Error importing routes: {e}", exc_info=True)
    # Fallback: —Å–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–∞–¥–∞–ª–æ
    @app.route('/')
    def index():
        return f"""
        <h1>üöß ZaTravel ‚Äî Routes Not Loaded</h1>
        <p><strong>–û—à–∏–±–∫–∞:</strong> {str(e)}</p>
        <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞.</p>
        <pre>{str(e)}</pre>
        """, 500

# === –°–ª—É–∂–µ–±–Ω—ã–µ —Ä–æ—É—Ç—ã ===
@app.route('/health')
def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è health-check (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Docker –∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)"""
    return {'status': 'ok', 'message': 'ZaTravel is running'}

@app.route('/debug')
def debug_info():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    return {
        'amadeus_key_exists': bool(app.config.get('AMADEUS_API_KEY')),
        'amadeus_secret_exists': bool(app.config.get('AMADEUS_API_SECRET')),
        'template_folder': app.template_folder,
        'static_folder': app.static_folder,
        'debug_mode': app.debug,
        'cache_configured': hasattr(app, 'extensions') and 'cache' in app.extensions,
        'filters_registered': len(app.jinja_env.filters) > 0
    }

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == '__main__':
    logger.info("üöÄ Starting ZaTravel application...")
    logger.info(f"üìÅ Template folder: {app.template_folder}")
    logger.info(f"üìÅ Static folder: {app.static_folder}")
    logger.info(f"üîë Amadeus API Key: {'SET' if app.config.get('AMADEUS_API_KEY') else 'MISSING'}")
    logger.info(f"üîí Debug mode: {app.debug}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 5001 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    port = int(os.environ.get('PORT', 5001))
    logger.info(f"üåê Running on http://localhost:{port}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    app.run(debug=app.debug, host='0.0.0.0', port=port)